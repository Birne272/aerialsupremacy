Index: guiv3/gui.asv
===================================================================
--- guiv3/gui.asv	(revision 20)
+++ guiv3/gui.asv	(working copy)
@@ -22,7 +22,7 @@
 
 % Edit the above text to modify the response to help gui
 
-% Last Modified by GUIDE v2.5 06-Jun-2012 16:10:16
+% Last Modified by GUIDE v2.5 06-Jun-2012 21:57:23
 
 % Begin initialization code - DO NOT EDIT
 gui_Singleton = 1;
@@ -79,45 +79,45 @@
 handles.isConnected = 0;
 %0 normal 1 minimized
 
+%RotateButton
+I=imread('rot90.png');
+set(handles.rotm90button,'CData',I);
+I=imread('rotm90.png');
+set(handles.rot90button,'CData',I);
+  
+%Side HEADER
 axes(handles.sideheader);
-%I=imread('sidergraksa.png');
-I=imread('siderraise.png');
+I=imread('sidergraksa.png');
+%^I=imread('siderraise.png');
 imshow(I);
 
 %Initializing Survelliance
 axes(handles.image);
 handles.imdata = rgb2gray(imread('square.png'));
+handles.imdataOrig = 
 %handles.imHandle = imshow(handles.imdata);
 imshow(handles.imdata);
 set(handles.debug,'string',enquestr('Survelliance Initialized'));
 set(handles.ImageStatus,'string','0.0%');
 set(handles.imtime,'string','0.00');
 
-
-
 %Initializing Compas
 %set(gcf,'renderer','opengl');
 opengl software;
 axes(handles.compass);
-handles.cmpd = imread('cmpd.png');
-cmps = imread('cmps.png');
+%handles.cmpd = imread('cmpd.png');
 
 hold on;
+[handles.cmpd, map, alpha] = imread('cmpd.png'); 
 handles.cmps = imshow(handles.cmpd);
+set(handles.cmps, 'AlphaData', alpha);
+
+[cmps, map, alpha] = imread('cmps.png'); 
 H2=imshow(cmps);
+set(H2, 'AlphaData', alpha);
+
 hold off;
 %keyboard;
-[row col c] = size(cmps);
-AMap = ones(row,col);
-x=0;
-for i=1:row
-	for j=1:col
-		if ((cmps(i,j,1)==0)&&(cmps(i,j,2)==168)&&(cmps(i,j,3)==89))
-			AMap(i,j) = 0;
-		end
-	end
-end
-set(H2, 'AlphaData', AMap);
 axis image;
 set(handles.debug,'string',enquestr('Compass Initialized'));
 %keyboard;
@@ -394,51 +394,9 @@
 
 
 
-% --- Executes on button press in rot90button.
-function rot90button_Callback(hObject, eventdata, handles)
-% hObject    handle to rot90button (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    structure with handles and user data (see GUIDATA)
 
-axes(handles.image);
-%keyboard;
-handles.imdata = imrotate(handles.imdata,90,'bilinear');
-imshow(handles.imdata);
 
-strtemp=sprintf('Picture has been rotated by -90 degrees');
-set(handles.debug,'string',enquestr(strtemp));
 
-guidata(hObject, handles);
-
-% --- Executes on button press in rotm90button.
-function rotm90button_Callback(hObject, eventdata, handles)
-% hObject    handle to rotm90button (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    structure with handles and user data (see GUIDATA)
-axes(handles.image);
-%keyboard;
-handles.imdata = imrotate(handles.imdata,-90,'bilinear');
-imshow(handles.imdata);
-
-strtemp=sprintf('Picture has been rotated by 90 degrees');
-set(handles.debug,'string',enquestr(strtemp));
-
-guidata(hObject, handles);
-
-% --- Executes on button press in savebutton.
-function savebutton_Callback(hObject, eventdata, handles)
-% hObject    handle to savebutton (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    structure with handles and user data (see GUIDATA)
-a=fix(clock);
-fname = sprintf('cam%02d%02d_%02d%02d.png',a(3),a(2),a(4),a(5));
-imwrite(handles.imdata,fname,'png');
-movefile(fname,'savedpic\')
-strtemp=sprintf('Picture saved as savedpic/%s',fname);
-set(handles.debug,'string',enquestr(strtemp));
-
-
-
 % --- Executes on button press in pushbutton7.
 function pushbutton7_Callback(hObject, eventdata, handles)
 % hObject    handle to pushbutton7 (see GCBO)
@@ -589,12 +547,54 @@
 % hObject    handle to hebutton (see GCBO)
 % eventdata  reserved - to be defined in a future version of MATLAB
 % handles    structure with handles and user data (see GUIDATA)
-keyboard;
+axes(handles.image);
 I=adapthisteq(handles.imdata);
 imshow(I);
 
+% --- Executes on button press in rot90button.
+function rot90button_Callback(hObject, eventdata, handles)
+% hObject    handle to rot90button (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    structure with handles and user data (see GUIDATA)
 
+axes(handles.image);
+%keyboard;
+handles.imdata = imrotate(handles.imdata,90,'bilinear');
+imshow(handles.imdata);
 
+strtemp=sprintf('Picture has been rotated by -90 degrees');
+set(handles.debug,'string',enquestr(strtemp));
+
+guidata(hObject, handles);
+
+% --- Executes on button press in rotm90button.
+function rotm90button_Callback(hObject, eventdata, handles)
+% hObject    handle to rotm90button (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    structure with handles and user data (see GUIDATA)
+axes(handles.image);
+%keyboard;
+handles.imdata = imrotate(handles.imdata,-90,'bilinear');
+imshow(handles.imdata);
+
+strtemp=sprintf('Picture has been rotated by 90 degrees');
+set(handles.debug,'string',enquestr(strtemp));
+
+guidata(hObject, handles);
+
+% --- Executes on button press in savebutton.
+function savebutton_Callback(hObject, eventdata, handles)
+% hObject    handle to savebutton (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    structure with handles and user data (see GUIDATA)
+a=fix(clock);
+fname = sprintf('cam%02d%02d_%02d%02d.png',a(3),a(2),a(4),a(5));
+imwrite(handles.imdata,fname,'png');
+movefile(fname,'savedpic\')
+strtemp=sprintf('Picture saved as savedpic/%s',fname);
+set(handles.debug,'string',enquestr(strtemp));
+
+
 % --- Executes on slider movement.
 function cslider_Callback(hObject, eventdata, handles)
 % hObject    handle to cslider (see GCBO)
@@ -622,3 +622,13 @@
 % hObject    handle to deblurbutton (see GCBO)
 % eventdata  reserved - to be defined in a future version of MATLAB
 % handles    structure with handles and user data (see GUIDATA)
+
+
+% --- Executes on button press in imreset.
+function imreset_Callback(hObject, eventdata, handles)
+% hObject    handle to imreset (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    structure with handles and user data (see GUIDATA)
+keyboard;
+
+guidata(hObject, handles);
Index: guiv3/gui.fig
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: guiv3/gui.m
===================================================================
--- guiv3/gui.m	(revision 22)
+++ guiv3/gui.m	(working copy)
@@ -353,6 +353,8 @@
 	% 2 Start Surveillance Mode
 	% 3 Halt All Data Transmission
 	handles.isrunning = 1;
+	set(handles.cslider,'Value',5)
+	set(handles.bslider,'Value',5)
 	guidata(hObject, handles);	
 	switch command_val
 		case 1
@@ -520,37 +522,23 @@
 end
 
 
-% --- Executes on slider movement.
-function bslider_Callback(hObject, eventdata, handles)
-% hObject    handle to bslider (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    structure with handles and user data (see GUIDATA)
 
-% Hints: get(hObject,'Value') returns position of slider
-%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
 
-
-% --- Executes during object creation, after setting all properties.
-function bslider_CreateFcn(hObject, eventdata, handles)
-% hObject    handle to bslider (see GCBO)
-% eventdata  reserved - to be defined in a future version of MATLAB
-% handles    empty - handles not created until after all CreateFcns called
-
-% Hint: slider controls usually have a light gray background.
-if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
-    set(hObject,'BackgroundColor',[.9 .9 .9]);
-end
-
-
 % --- Executes on button press in hebutton.
 function hebutton_Callback(hObject, eventdata, handles)
 % hObject    handle to hebutton (see GCBO)
 % eventdata  reserved - to be defined in a future version of MATLAB
 % handles    structure with handles and user data (see GUIDATA)
 axes(handles.image);
-I=adapthisteq(handles.imdata);
-imshow(I);
+handles.imdata=adapthisteq(handles.imdata);
+imshow(handles.imdata);
 
+
+strtemp=sprintf('CLAHE has been implemented');
+set(handles.debug,'string',enquestr(strtemp));
+
+guidata(hObject, handles);
+
 % --- Executes on button press in rot90button.
 function rot90button_Callback(hObject, eventdata, handles)
 % hObject    handle to rot90button (see GCBO)
@@ -603,9 +591,44 @@
 
 % Hints: get(hObject,'Value') returns position of slider
 %        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
+axes(handles.image);
+contrast=(get(handles.cslider,'Value')-5)/5;
+brightness=(get(handles.bslider,'Value')-5)/5;
+handles.imdata = changeBrightness(handles.imdataOrig,contrast,brightness);
+imshow(handles.imdata);
 
+guidata(hObject, handles);
 
+
+
+% --- Executes on slider movement.
+function bslider_Callback(hObject, eventdata, handles)
+% hObject    handle to bslider (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    structure with handles and user data (see GUIDATA)
+
+% Hints: get(hObject,'Value') returns position of slider
+%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
+axes(handles.image);
+contrast=(get(handles.cslider,'Value')-5)/5;
+brightness=(get(handles.bslider,'Value')-5)/5;
+handles.imdata = changeBrightness(handles.imdataOrig,contrast,brightness);
+imshow(handles.imdata);
+
+guidata(hObject, handles);
+
 % --- Executes during object creation, after setting all properties.
+function bslider_CreateFcn(hObject, eventdata, handles)
+% hObject    handle to bslider (see GCBO)
+% eventdata  reserved - to be defined in a future version of MATLAB
+% handles    empty - handles not created until after all CreateFcns called
+
+% Hint: slider controls usually have a light gray background.
+if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
+    set(hObject,'BackgroundColor',[.9 .9 .9]);
+end
+
+% --- Executes during object creation, after setting all properties.
 function cslider_CreateFcn(hObject, eventdata, handles)
 % hObject    handle to cslider (see GCBO)
 % eventdata  reserved - to be defined in a future version of MATLAB
@@ -633,5 +656,6 @@
 axes(handles.image);
 handles.imdata = handles.imdataOrig;
 imshow(handles.imdata);
-
+set(handles.cslider,'Value',5)
+set(handles.bslider,'Value',5)
 guidata(hObject, handles);
Index: guiv3/resources/changeBrightness.m
===================================================================
--- guiv3/resources/changeBrightness.m	(revision 0)
+++ guiv3/resources/changeBrightness.m	(working copy)
@@ -0,0 +1,26 @@
+function RGBnew = changeBrightness(RGB, brightness, contrast)
+
+% function RGBnew = changeBrightness(RGB, brightness, contrast)
+% 
+% This function changes the brightness and contrast of an RGB image
+%
+% ARGUMENTS:
+% - RGB: the RGB image
+% - brightness: the brightness factor (-1..1)
+% - contrast: the contrast factor (-1..1)
+%
+% RETURNS
+% - RGBnew: the processed image
+%
+% Theodoros Giannakopoulos.
+% www.di.uoa.gr/~tyiannak
+% tyiannak@di.uoa.gr, tyannak@gmail.com
+%
+
+RGBnew = RGB;
+if (brightness < 0.0)  
+    RGBnew = RGBnew * ( 1.0 + brightness);
+else
+    RGBnew = RGBnew + ((1.0 - RGBnew) * brightness);
+end
+RGBnew = (RGBnew - 0.5) * (tan ((contrast + 1) * pi/4) ) + 0.5;
\ No newline at end of file
